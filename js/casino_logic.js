// casino_logic.js ‚Äî —Å–ª–æ—Ç-–º–∞—à–∏–Ω–∞ + —Å—Ç–∞–≤–∫–∞ (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å currency.js API)
// –¢—Ä–µ–±—É–µ—Ç: –≤ page —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω currency.js –∏ –µ—Å—Ç—å #balance-amount, #balance-currency

// ===== –°–ò–ú–í–û–õ–´ –ò –ó–í–£–ö–ò =====
const symbols = ["üçí", "üçã", "üíé", "üí∞", "7Ô∏è‚É£"];

const sounds = {
  lever: new Audio("sounds/lever.wav"),
  rolling: new Audio("sounds/rolling.wav"),
  stop: new Audio("sounds/stop.wav"),
  win: new Audio("sounds/win.wav"),
  lose: new Audio("sounds/lose.wav"),
};

// –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–≤—É–∫–∞
for (let k in sounds) { try { sounds[k].volume = 0.45; sounds[k].preload = "auto"; } catch(e){} }

document.addEventListener("DOMContentLoaded", () => {
  const casinoTab = document.getElementById("casinoTab");
  const site = document.getElementById("site");

  casinoTab.addEventListener("click", (e) => {
    e.preventDefault();
    if (document.getElementById("casinoScreen")) return;

    casinoTab.classList.remove("active");
    casinoTab.style.background = "#222";
    casinoTab.style.color = "#fff";

    const mainContent = document.querySelector("main.content");
    if (mainContent) {
      mainContent.style.transition = "opacity 1s ease";
      mainContent.style.opacity = "0";
      setTimeout(() => (mainContent.style.display = "none"), 1000);
    }

    const casinoScreen = document.createElement("div");
    casinoScreen.id = "casinoScreen";
    casinoScreen.innerHTML = `
      <div class="casino-content">
        <h1>üé∞ –°–õ–û–¢ –ú–ê–®–ò–ù–ê üé∞</h1>
        <div class="slot-machine" id="slotMachine">
          <div class="slots">
            <div class="slot"><div class="reel"></div></div>
            <div class="slot"><div class="reel"></div></div>
            <div class="slot"><div class="reel"></div></div>
          </div>

          <!-- –ø–∞–Ω–µ–ª—å —Å—Ç–∞–≤–æ–∫ -->
          <div class="bet-panel" id="betPanel">
            <button id="decrease-bet" class="bet-btn">‚àí</button>
            <input type="number" id="bet-input" value="10" min="1" step="0.01" />
            <button id="increase-bet" class="bet-btn">+</button>
          </div>

          <div class="lever" id="lever">
            <div class="lever-ball"></div>
          </div>
        </div>
      </div>
      <div class="currency-layer" id="casinoCurrencyLayer"></div>
    `;
    site.appendChild(casinoScreen);

    // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
    setTimeout(() => {
      casinoScreen.style.opacity = "1";
      const layer = document.getElementById("casinoCurrencyLayer");
      setInterval(() => spawnCurrencies(layer, 8, 0.12, 1.5), 1200);
    }, 200);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã (–∏ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞–≤–æ–∫)
    initSlotMachine();
  });
});

// ===============================
// –õ–û–ì–ò–ö–ê –°–¢–ê–í–û–ö: helpers
// ===============================
function safeNumber(v) {
  const n = Number(String(v).replace(',', '.'));
  return isNaN(n) ? 0 : n;
}

// –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ currency API (–µ—Å–ª–∏ –µ—Å—Ç—å)
function currencyAPI() {
  return window.__casinoBalance || null;
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å (–≤ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–π –≤–∞–ª—é—Ç–µ)
function getDisplayedBalance() {
  const api = currencyAPI();
  if (api) return api.getDisplayedBalance();
  // fallback: —á–∏—Ç–∞–µ–º –∏–∑ DOM
  const el = document.getElementById('balance-amount');
  if (!el) return 0;
  return safeNumber(el.textContent);
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–∞–ª—é—Ç–∞ (–∫–æ–¥)
function getCurrentCurrency() {
  const api = currencyAPI();
  if (api) return api.getCurrency();
  const el = document.getElementById('balance-currency');
  return el ? el.textContent : 'VM';
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –∏–∑ —Ç–µ–∫—É—â–µ–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–π –≤–∞–ª—é—Ç—ã -> VM
function convertDisplayedToVM(amount) {
  const api = currencyAPI();
  if (api) {
    return api.convertToVM(api.getCurrency(), amount);
  }
  // fallback: assume 1:1
  return amount;
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç vm -> displayed currency
function convertVMToDisplayed(vmAmount) {
  const api = currencyAPI();
  if (api) {
    return api.convertVMto(api.getCurrency(), vmAmount);
  }
  return vmAmount;
}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π baseVM (—á–µ—Ä–µ–∑ API)
function changeBaseVMBy(deltaVM) {
  const api = currencyAPI();
  if (api && typeof api.getBaseVM === 'function' && typeof api.setBaseVM === 'function') {
    const newVM = api.getBaseVM() + deltaVM;
    api.setBaseVM(newVM, { animate: true });
  } else {
    // fallback: –æ–±–Ω–æ–≤–ª—è–µ–º DOM amount –Ω–∞–ø—Ä—è–º—É—é (–Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π baseVM)
    const amountEl = document.getElementById('balance-amount');
    const curr = getCurrentCurrency();
    const cur = safeNumber(amountEl.textContent);
    amountEl.textContent = (cur + convertVMtoFallback(curr, deltaVM)).toFixed(2);
  }
}

// Fallback convert for case API absent (very naive; assumes 1:1)
function convertVMtoFallback(currency, vmAmount) {
  return vmAmount;
}

// ===============================
// –õ–û–ì–ò–ö–ê –°–õ–û–¢ –ú–ê–®–ò–ù–´ + –°–¢–ê–í–ö–ò
// ===============================
function initSlotMachine() {
  const slotMachine = document.getElementById("slotMachine");
  const reels = slotMachine.querySelectorAll(".reel");
  const lever = document.getElementById("lever");

  // bet controls
  const betInput = document.getElementById('bet-input');
  const decBtn = document.getElementById('decrease-bet');
  const incBtn = document.getElementById('increase-bet');

  // –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚Äî –≤—ã—Ö–æ–¥–∏–º
  if (!betInput || !decBtn || !incBtn) {
    console.warn('bet panel elements not found');
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏: 1% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ (–≤ –æ—Ç–æ–±—Ä. –≤–∞–ª—é—Ç–µ), –º–∏–Ω–∏–º—É–º 1
  function initBetDefault() {
    const dispBal = getDisplayedBalance();
    const defaultBet = Math.max(1, Math.round(dispBal * 0.01 * 100) / 100);
    betInput.value = defaultBet;
  }
  initBetDefault();

  // –û–±–Ω–æ–≤–ª—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ (—á—Ç–æ–±—ã –Ω–µ –±–æ–ª—å—à–µ –±–∞–ª–∞–Ω—Å–∞ –∏ >=1)
  function clampBet() {
    const max = getDisplayedBalance();
    let bet = safeNumber(betInput.value);
    if (bet < 1) bet = 1;
    if (bet > max) bet = max;
    // –æ–∫—Ä—É–≥–ª–∏–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
    betInput.value = Math.round(bet * 100) / 100;
    return bet;
  }

  // –ø—Ä–∏ –∫–ª–∏–∫–µ —É–º–µ–Ω—å—à–∏—Ç—å –Ω–∞ 10%
  decBtn.addEventListener('click', () => {
    let bet = safeNumber(betInput.value);
    bet = Math.max(1, bet * 0.9);
    betInput.value = Math.round(bet * 100) / 100;
  });

  // –ø—Ä–∏ –∫–ª–∏–∫–µ —É–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞ 10% (–Ω–æ –Ω–µ –±–æ–ª—å—à–µ –±–∞–ª–∞–Ω—Å–∞)
  incBtn.addEventListener('click', () => {
    let bet = safeNumber(betInput.value);
    const max = getDisplayedBalance();
    bet = Math.min(max, bet * 1.1 || 1);
    betInput.value = Math.round(bet * 100) / 100;
  });

  // –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∞–ª—é—Ç—ã ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É –∏–∑ —Å—Ç–∞—Ä–æ–π –≤ –Ω–æ–≤—É—é
  document.addEventListener('currencyChanged', (e) => {
    const api = currencyAPI();
    if (!api) return;
    // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É (–∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –≤ —Å—Ç–∞—Ä–æ–π –≤–∞–ª—é—Ç–µ) –≤ VM, –∑–∞—Ç–µ–º –≤ –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É
    const oldCurrency = e.detail && e.detail.oldCurrency ? e.detail.oldCurrency : null;
    // if API available, easier: take current bet value (in old displayed currency), convert to VM, then to new display
    const betDisplayed = safeNumber(betInput.value);
    const vm = api.convertToVM(api.getCurrency(), betDisplayed); // note: api.getCurrency() already updated by currency.js earlier
    // but event is dispatched after currency change; to be safe: just set to 1% of new balance
    const dispBal = api.getDisplayedBalance();
    const defaultBet = Math.max(1, Math.round(dispBal * 0.01 * 100) / 100);
    betInput.value = defaultBet;
  });

  // spinning control
  let spinning = false;

  // helper to build reel DOM with finalSymbol near end
  function buildReelDOM(reel, finalSymbol, itemsCount) {
    reel.innerHTML = "";
    const finalIndex = Math.max(3, itemsCount - 3);
    for (let k = 0; k < itemsCount; k++) {
      const div = document.createElement("div");
      div.className = "symbol";
      div.textContent = (k === finalIndex) ? finalSymbol : symbols[Math.floor(Math.random() * symbols.length)];
      reel.appendChild(div);
    }
    return finalIndex;
  }

  // –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—ã—á–∞–≥–∞
  lever.addEventListener("click", async () => {
    if (spinning) return;
    spinning = true;

    // validate bet
    const betDisplayed = clampBet();
    const displayedBal = getDisplayedBalance();
    if (betDisplayed > displayedBal) {
      // shake input to show error
      betInput.animate([{ transform: 'translateX(-6px)' }, { transform: 'translateX(6px)' }, { transform: 'translateX(0)' }], { duration: 300 });
      spinning = false;
      return;
    }

    // play lever sound
    try { sounds.lever.currentTime = 0; sounds.lever.play(); } catch(e){}

    // animate lever visually
    lever.classList.add("active");
    setTimeout(() => lever.classList.remove("active"), 500);

    // play rolling sound (loopable)
    try {
      sounds.rolling.currentTime = 0;
      sounds.rolling.loop = true;
      sounds.rolling.play();
    } catch (e) {}

    slotMachine.classList.remove("win", "lose");

    // —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞—Ä–∞–Ω–µ–µ: 35% –≤—ã–∏–≥—Ä—ã—à
    const isWin = Math.random() < 0.35;
    let result = [];
    if (isWin) {
      const sym = symbols[Math.floor(Math.random() * symbols.length)];
      result = [sym, sym, sym];
    } else {
      // —Å–ª—É—á–∞–π–Ω—ã–µ, –Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–∏–ø
      result = [
        symbols[Math.floor(Math.random() * symbols.length)],
        symbols[Math.floor(Math.random() * symbols.length)],
        symbols[Math.floor(Math.random() * symbols.length)]
      ];
      if (result[0] === result[1] && result[1] === result[2]) {
        result[2] = symbols[(symbols.indexOf(result[2]) + 1) % symbols.length];
      }
    }

    // —Å–∏–º–≤–æ–ª –≤—ã—Å–æ—Ç–∞
    const symH = (() => {
      let sample = reels[0].querySelector(".symbol");
      if (!sample) {
        const tmp = document.createElement("div");
        tmp.className = "symbol";
        tmp.style.visibility = "hidden";
        tmp.textContent = symbols[0];
        reels[0].appendChild(tmp);
        const h = tmp.offsetHeight || 150;
        reels[0].removeChild(tmp);
        return h;
      }
      return sample.offsetHeight || 150;
    })();

    // —Å—Ç—Ä–æ–∏–º –ø–æ—Ç–æ–∫–∏ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º –≤–Ω—É—Ç—Ä–∏
    const itemsCountBase = 20;
    const finalIndexes = [];

    reels.forEach((reel, i) => {
      const finalSymbol = result[i];
      const itemsCount = itemsCountBase + i * 5;
      const finalIndex = buildReelDOM(reel, finalSymbol, itemsCount);
      finalIndexes.push(finalIndex);
      reel.style.transition = "none";
      reel.style.transform = `translateY(0px)`;
    });

    // –∞–Ω–∏–º–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π reel
    reels.forEach((reel, i) => {
      const finalIndex = finalIndexes[i];
      const targetTranslate = -finalIndex * symH;
      const duration = 2200 + i * 600;
      const delay = i * 180;

      setTimeout(() => {
        reel.style.transition = `transform ${duration}ms cubic-bezier(.1,.9,.2,1)`;
        reel.style.transform = `translateY(${targetTranslate}px)`;
      }, delay);

      // –ø—Ä–æ–∏–≥—Ä–∞—Ç—å stop sound —á—É—Ç—å —Ä–∞–Ω—å—à–µ
      setTimeout(() => {
        try { sounds.stop.currentTime = 0; sounds.stop.play(); } catch (e) {}
      }, duration + delay - 300);

      // —Ñ–∏–∫—Å–∞—Ü–∏—è DOM –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç—Ä–æ–π–∫—É prev/final/next –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã)
      setTimeout(() => {
        const children = Array.from(reel.children);
        const finalEl = children[finalIndex];
        const prev = children[finalIndex - 1] ? children[finalIndex - 1].cloneNode(true) : null;
        const next = children[finalIndex + 1] ? children[finalIndex + 1].cloneNode(true) : null;
        setTimeout(() => {
          reel.style.transition = "none";
          reel.innerHTML = "";
          if (prev) reel.appendChild(prev);
          reel.appendChild(finalEl.cloneNode(true));
          if (next) reel.appendChild(next);
          reel.style.transform = `translateY(-${symH}px)`;
        }, 40);
      }, duration + delay + 40);
    });

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–∞—Å—á—ë—Ç –≤—ã–ø–ª–∞—Ç
    const overallWait = 2200 + (reels.length - 1) * 600 + 800;
    setTimeout(() => {
      spinning = false;
      try { sounds.rolling.pause(); } catch(e) {}

      // –≤—ã—á–∏—Å–ª–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ VM
      const betDisp = clampBet(); // displayed currency amount
      const betVM = convertDisplayedToVM(betDisp);

      if (isWin) {
        // –≤—ã–∏–≥—Ä—ã—à ‚Äî –≤—ã–ø–ª–∞—Ç–∞ 2x —Å—Ç–∞–≤–∫–∏: —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å = —Å—Ç–∞–≤–∫–∞ (—Ç.–µ. –¥–æ–±–∞–≤–ª—è–µ–º betVM)
        changeBaseVMBy(+betVM);
        slotMachine.classList.add("win");
        try { sounds.win.currentTime = 0; sounds.win.play(); } catch(e){}
      } else {
        // –ø—Ä–æ–∏–≥—Ä—ã—à ‚Äî —Å–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
        changeBaseVMBy(-betVM);
        slotMachine.classList.add("lose");
        try { sounds.lose.currentTime = 0; sounds.lose.play(); } catch(e){}
      }

      // –Ω–µ–±–æ–ª—å—à–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞, –∑–∞—Ç–µ–º —É–±—Ä–∞—Ç—å
      setTimeout(() => slotMachine.classList.remove("win", "lose"), 1800);
    }, overallWait + 200);
  });
}
